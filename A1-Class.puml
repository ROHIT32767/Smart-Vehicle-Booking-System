@startuml
class User{
    + userID: String 
    - userName : String
    - email : String
    - password : String
    - phone : String
    - age : int
    - walletID : String
    # verificationID: String
    - isVerified: boolean
    - isWalletEnabled: boolean
    - isAutoDeductEnabled: boolean
    - moneyDue: double
    - currentVehicleID: String
    - tripHistory : List<Trip>
    - transactionHistory : List<Transaction>
    +verify() : boolean
    +newUser() : boolean
    +addMoney() : boolean
    +getTripHistory() : List<Trip>
    +getWalletBalance() : double
    +getVerificationID() : String
    +getIsVerified() : boolean
    +getIsWalletEnabled() : boolean
    +getIsAutoDeductEnabled() : boolean
    +setPaymentMethod() : boolean
    +pay() : boolean
    +getTransactionHistory() : List<Transaction>
    +getTripHistory() : List<Trip>
    +uploadVerificationID() : boolean
}
class Student extends User{
    + rollNo : String
    - year : int
    - branch : String
    - deductFromFees : boolean
    - deductFromWallet : boolean
    +getYear() : int
    +getBranch() : String
    +getDeductFromFees() : boolean
    +getDeductFromWallet() : boolean
}
class Staff extends User{
    + staffID : String
    - designation : String
    - deductFromSalary : boolean
    - deductFromWallet : boolean
    +getDesignation() : String
    +getDeductFromSalary() : boolean
    +getDeductFromWallet() : boolean
}
class Teacher extends User{
    + teacherID : String
    - designation : String
    - deductFromSalary : boolean
    - deductFromWallet : boolean
    +getDesignation() : String
    +getDeductFromSalary() : boolean
    +getDeductFromWallet() : boolean
}

class Vehicle{
    +vehicleID : String
    -vehicleType : String
    + QRcode : String
    # reservedAt : Date
    # reservedBy : User
    - isReserved : boolean
    - Color: String
    - tyrePressure : double
    - usageHistory : List<Trip>
    +getVehicleType() : String
    +getQRcode() : String
    +getReservedAt() : Date
    +getReservedBy() : User
    +getIsReserved() : boolean
    +setVehicleStatus() : boolean
    +setReservedAt() : boolean
    +setReservedBy() : boolean
    +scanQRcode() : boolean
    +reserveVehicle() : boolean
    +returnVehicle() : boolean
    +newVehicle() : boolean
    +getUsageHistory() : List<Trip>
}
class Bike extends Vehicle{
    - fuelStatus : double
    + getfuelStatus() : double
}
class Moped extends Vehicle{
    - batteryPercentage : double
    + getBatteryPercentage() : double
}
class Bicycle extends Vehicle{
    + basketCapacity : int
    + getBasketCapacity() : int
}

interface LocationTracker {
  + startTracking(): void
  + stopTracking(): void
  + getCurrentLocation(): String
  + setDestination(destination: String): void
  + getRoute(): List<String>
  + displayMap(): void
}

class DockingStation implements LocationTracker{
    + stationID : String
    - stationName : String
    - stationLocation : String
    - vehiclesDocked : List<Vehicle>
    - stationUsageHistory : List<Trip>
    - VehicleLocations: Map<String, String>
    - stationCapacity : int
    - stationMaintenanceStatus : String
    - stationSecurityStatus : String
    + getStationName() : String
    + getStationLocation() : Stringn
    + getStationUsageHistory() : List<Trip>
    + getVehiclesDocked() : List<Vehicle>
    + dockVehicle() : boolean
    + undockVehicle() : boolean
    + newDockingStation() : boolean
    + updateVehicleLocation(VehicleID: String, location: String): void
    + updateVehicleStatus(VehicleID: String, status: String): void
    + logData(data: String): void
}

class Transaction{
    + transactionID : String
    - transactionDate : Date
    - transactionAmount : double
    - transactionType : String
    - transactionStatus : String
    - transactionRemarks : String
    - transactionBy : User
    - transactionFor : Vehicle
    + getTransactionDate() : Date
    + getTransactionAmount() : double
    + getTransactionType() : String
    + getTransactionStatus() : String
    + getTransactionRemarks() : String
    + updateTransaction() : boolean
    + deleteTransaction() : boolean
    + getTransactionBy() : User
    + getTransactionFor() : Vehicle
    + makeTransaction() : boolean
    + updateWallet() : boolean
}

class Trip{
    + tripID : String
    - tripStart : Date
    - tripEnd : Date
    - tripStartLocation : DockingStation
    - tripEndLocation : DockingStation
    - tripDistance : double
    - tripAmount : double
    - tripTransaction : Transaction
    - tripStatus : String
    - tripRemarks : String
    - tripByUserID : String
    - tripForVehicleID : String
    - tripFine : double
    - Rating : Rating
    + getTripStart() : Date
    + getTripEnd() : Date
    + getTripStartLocation() : String
    + getTripEndLocation() : String
    + getTripDistance() : double
    + getTripAmount() : double
    + getTripStatus() : String
    + getTripRemarks() : String
    + newTrip() : boolean
    + updateTrip() : boolean
    + deleteTrip() : boolean
    + getTripBy() : User
    + getTripFor() : Vehicle
    + startTrip() : boolean
    + endTrip() : boolean
    + calculateTripAmount() : double
    + updateVehicle(): boolean
}

class Rating {
    + ratingID : key
    - Stars : int 
    - Feedback : String
    + giveRating() : boolean
    + giveFeedback() : boolean
    + updateRating() : boolean
    + updateFeedback() : boolean
}

class SupportManagement{
    + ticketID : key
    - description : String
    - tags : List<String>
    - assignedTo : String
    - raisedByUserID: String
    - raiseTicket() : boolean
    - closeIssue() : boolean
    - submitFeedback(): boolean
    - updateTicket() : boolean
    - getTicketDetails() : String
    - getTicketStatus() : String
}

class Wallet implements SalaryDeduction, FeeDeduction , UPIApp{
    + walletID : String
    - walletUserID : key
    - walletBalance : double
    - walletTransactions : List<Transaction>
    + getWalletBalance() : double
    + getWalletTransactions() : List<Transaction>
    + newWallet() : boolean
    + updateWallet() : boolean
    + deleteWallet() : boolean
    + getWalletBalance() : double
    + getWalletUser() : User
    + addMoney() : boolean
    + deductMoney() : boolean
    + updateWallet() : boolean
}

interface UPIApp {
  + openUPIApp(): void
  + proceedWithUPI(): void
}

class MobileApp implements LocationTracker{
  - appVersion: String
  - deviceOS: String
  + login(): void
  + logout(): void
  + register(): void
  + openMobileApp(): void
  + proceedWithMobileApp(): void
  + payWithWallet(): void
  + showDocumentations(): void
  + updateProfile(): void
  + displayFAQs(): void
  + viewNotifications(): void
  + accessSupport(): void
  + checkInbox(): void
  + setPreferences(): void
  + planRoute(destination: String): void
  + viewPromotions(): void
  + shareTripDetails(): void
  + rateApp(): void
  + toggleNotifications(enable: boolean): void
  + viewHistory(): void
  + inviteFriends(): void
  + redeemRewards(): void
  + reportIssue(): void
}

class VerificationManager{
    + verifyUser() : boolean
    + sendVerificationCode() : boolean
    + verifyVerificationCode() : boolean
    + verifyID() : boolean
}


interface SalaryDeduction {
  + deductFromSalary(): void
}

interface FeeDeduction {
  + addToFees(): void
}

User "1" -- "0..*" Trip : Goes On >
Trip "0..*" o-- "1..*" DockingStation : Starts/Ends At
Vehicle "1" -- "0..*" Trip : Used In >
Trip "1" o-- "1" Transaction : Associated With >
User "1" -- "0..*" Transaction : Makes >
DockingStation "0..*" o-- "0..*" Vehicle : Contains
User "1" -- "1" Wallet : Owns >
Trip "1" *-- "0..1" Rating : has
User "1" -- "0..*" SupportManagement : Raises
User "0..*" -- "0..*" MobileApp : Uses
Wallet "1" *-- "0..*" Transaction : Initiates
User "0..*" -- "0..*" Vehicle : Rides >
User "0..*" -- "0..*" DockingStation : Visits >
User "1" -- "0..*" Rating : Gives >
VerificationManager "1" -- "0..*" User : Verifies >

@enduml



